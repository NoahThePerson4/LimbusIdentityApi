@page "/identity"
@page "/identity/{Id:int}"
@using LimbusIdentityApp.Clients
@using LimbusIdentityApp.Models
@inject IdentityClient IDClient
@inject SkillClient SkillClient
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>@Title</PageTitle>

<div class="mt-2">
    <a class="btn btn-primary" role="button" href="/identities">Identities</a>
</div>

@if (identity is null)
{
    <div><em>Loading...</em></div>
}
else
{
    <table class="table table-striped mt-3">
        <thead class="table-dark">
            <tr>
                <th colspan="3">@identity.Name @identity.Sinner</th>
            </tr>
        </thead>

        <tbody>
        <tr>
        <td style="text-align: center; vertical-align: bottom; padding: 0; margin: 0;">
            <img class="" src="@identity.Image" alt="Card image cap" style="width: 344px; height: 598px; object-fit:contain">
        </td>
                <td style="text-align: center; vertical-align: middle; padding: 0; margin: 0;">
                <div class="mt-2">
                    <a class="btn btn-primary" role="button" href="@Faction">@FactionTitle</a>
                </div>
                </td>
                <td style="text-align: center; vertical-align: middle; padding: 0; margin: 0;">
                <div class="mt-2">
                    <a class="btn btn-primary" role="button" href="@SinnerPath">@identity.Sinner</a>
                </div>
                </td>
        </tr>
        </tbody>
    </table>

    <table class="table table-striped table table-hover mt-3">
        <thead class="table-dark">
        
        <tr>
        <th>Id</th>
        <th>Name</th>
        <th>Sinner</th>
        <th>Health</th>
        <th>DefenseLevel</th>
        <th>MinSpeed</th>
        <th>MaxSpeed</th>
        <th>Passive Ids</th>
        <th>Skill Ids</th>
        </tr>
        </thead>
        <tbody>
            <tr>
                <td style="@ColorMain">@identity.Id</td>
                <td style="@ColorMain">@identity.Name</td>
                <td style="@ColorMain">@identity.Sinner</td>
                <td>@identity.Health</td>
                <td>@identity.DefenseLevel</td>
                <td>@identity.MinSpeed</td>
                <td>@identity.MaxSpeed</td>
                <td>@string.Join(", ",identity.PassiveIds)</td>
                <td>@string.Join(", ", identity.SkillIds)</td>
            </tr>
        </tbody>
    </table>

    @for (var i = 0; i < identity.PassiveIds.Count(); i++)
    {
        string passiveColor = identity.PassiveCosts[i] switch
        {
            var name when name.Contains("Wrath", StringComparison.OrdinalIgnoreCase) => "color:red",
            var name when name.Contains("Lust", StringComparison.OrdinalIgnoreCase) => "color:orange",
            var name when name.Contains("Sloth", StringComparison.OrdinalIgnoreCase) => "color:goldenrod",
            var name when name.Contains("Gluttony", StringComparison.OrdinalIgnoreCase) => "color:forestgreen",
            var name when name.Contains("Pride", StringComparison.OrdinalIgnoreCase) => "color:blue",
            var name when name.Contains("Gloom", StringComparison.OrdinalIgnoreCase) => "color:steelblue",
            var name when name.Contains("Envy", StringComparison.OrdinalIgnoreCase) => "color:purple",
            _ => "color:silver"
        };

       <table class="table table-striped table table-hover mt-3">
           <thead class="table-dark">
               <tr>
               <th>Passive Id</th>
               <th>Passive Name</th>
               <th>Passive Cost</th>
               <th>Passive Description</th>
                </tr>
           </thead>
           <tbody>
               <tr>
                    <td style="@ColorMain">@identity.PassiveIds[i]</td>
                    <td>@identity.PassiveNames[i]</td>
                    <td style="@passiveColor">@identity.PassiveCosts[i]</td>
                    <td>@identity.PassiveDescription[i]</td>
               </tr>
           </tbody>
        </table>
    }
   

 <div class="table-container">
    @foreach (var skill in Skills)
    {
            string skillColor = skill.Sin switch
            {
                var name when name.Contains("Wrath", StringComparison.OrdinalIgnoreCase) => "color:red",
                var name when name.Contains("Lust", StringComparison.OrdinalIgnoreCase) => "color:orange",
                var name when name.Contains("Sloth", StringComparison.OrdinalIgnoreCase) => "color:goldenrod",
                var name when name.Contains("Gluttony", StringComparison.OrdinalIgnoreCase) => "color:forestgreen",
                var name when name.Contains("Pride", StringComparison.OrdinalIgnoreCase) => "color:blue",
                var name when name.Contains("Gloom", StringComparison.OrdinalIgnoreCase) => "color:steelblue",
                var name when name.Contains("Envy", StringComparison.OrdinalIgnoreCase) => "color:purple",
                _ => "color:black"
            };

        <div class="table-wrapper">
        <table class="table table-striped table table-hover mt-4">
            <thead class="table-dark">
                <tr>
                    <th colspan="2">@skill.Name</th>
                </tr>
            </thead>

            <tbody>
                        <tr>
                            <td>Image</td>
                            <td style="text-align: center; vertical-align: bottom; padding: 0; margin: 0;">
                                <img class="" src="@skill.Image" alt="Card image cap">
                            </td>
                        </tr>
                        <tr>
                            <td>Skill Type</td>
                            <td>@skill.Type</td>
                        </tr>
                        <tr>
                            <td>Skill Sin</td>
                            <td style="@skillColor">@skill.Sin</td>
                        </tr>
                        <tr>
                            <td>@skill.MinRoll</td>
                            <td>@skill.MaxRoll</td>
                        </tr>
                        <tr>
                            <td>Skill Effect</td>
                            <td>@skill.SkillEffect</td>
                        </tr>

                        @for (int i = 0; i < skill.CoinEffects.Count(); i++)
                        {
                            <tr>
                                <td>Coin @(i + 1)</td>
                                <td>@skill.CoinEffects[i]</td>
                            </tr>
                        }
            </tbody>
        </table>
      </div>
    }
 </div>    
}

@code {

    [Parameter]
    public int? Id { get; set; }

    public Models.IdentityDetails? identity { get; set; }

    public List<Models.SkillDetails> Skills { get; set; } = new List<Models.SkillDetails>();

    string Title = "Identity";

    string ColorMain = "color:black";

    string Faction = "/identities";

    string FactionTitle = "Unknown";
    string SinnerPath = "/Sinner";

    protected async override Task OnParametersSetAsync()
    {
        if(identity is not null)
        {
            return;
        }

        if (Id is not null)
        {
            identity = await IDClient.GetIdentityAsync(Id.Value);

            foreach(var skillId in identity.SkillIds)
            {
                var skill = await SkillClient.GetSkillAsync(skillId);
                if(skill is not null)
                {
                    Skills.Add(skill);
                }
            }

            Title = string.Join(" ",identity.Name, identity.Sinner);

            ColorMain = identity.Name switch
            {
                var name when name.Contains("Zwei Association", StringComparison.OrdinalIgnoreCase) => "color:steelblue",
                var name when name.Contains("Shi Association", StringComparison.OrdinalIgnoreCase) => "color:red",
                var name when name.Contains("Cinq Association", StringComparison.OrdinalIgnoreCase) => "color:blue",
                var name when name.Contains("Liu Association", StringComparison.OrdinalIgnoreCase) => "color:orange",
                var name when name.Contains("Seven Association", StringComparison.OrdinalIgnoreCase) => "color:forestgreen",
                var name when name.Contains("Devyat Association", StringComparison.OrdinalIgnoreCase) => "color:mediumseagreen",
                var name when name.Contains("Dieci Association", StringComparison.OrdinalIgnoreCase) => "color:goldenrod",
                var name when name.Contains("Oufi Association", StringComparison.OrdinalIgnoreCase) => "color:purple",
                _ => ColorMain
            };

            Faction = identity.Name switch
            {
                var name when name.Contains("Zwei Association", StringComparison.OrdinalIgnoreCase) => "/Association/Zwei",
                var name when name.Contains("Shi Association", StringComparison.OrdinalIgnoreCase) => "/Association/Shi",
                var name when name.Contains("Cinq Association", StringComparison.OrdinalIgnoreCase) => "/Association/Cinq",
                var name when name.Contains("Liu Association", StringComparison.OrdinalIgnoreCase) => "/Association/Liu",
                var name when name.Contains("Seven Association", StringComparison.OrdinalIgnoreCase) => "/Association/Seven",
                var name when name.Contains("Devyat Association", StringComparison.OrdinalIgnoreCase) => "/Association/Devyat",
                var name when name.Contains("Dieci Association", StringComparison.OrdinalIgnoreCase) => "/Association/Dieci",
                var name when name.Contains("Oufi Association", StringComparison.OrdinalIgnoreCase) => "/Association/Oufi",
                _ => "/identities"
            };

            SinnerPath = identity.Sinner switch
            {
                var sinner when sinner.Contains("Yi Sang", StringComparison.OrdinalIgnoreCase) => "/Sinner/YiSang",
                var sinner when sinner.Contains("Faust", StringComparison.OrdinalIgnoreCase) => "/Sinner/Faust",
                var sinner when sinner.Contains("Don Quixote", StringComparison.OrdinalIgnoreCase) => "/Sinner/DonQuixote",
                var sinner when sinner.Contains("Ryoshu", StringComparison.OrdinalIgnoreCase) => "/Sinner/Ryoshu",
                var sinner when sinner.Contains("Meursault", StringComparison.OrdinalIgnoreCase) => "/Sinner/Meursault",
                var sinner when sinner.Contains("Hong Lu", StringComparison.OrdinalIgnoreCase) => "/Sinner/HongLu",
                var sinner when sinner.Contains("Heathcliff", StringComparison.OrdinalIgnoreCase) => "/Sinner/Heathcliff",
                var sinner when sinner.Contains("Ishmael", StringComparison.OrdinalIgnoreCase) => "/Sinner/Ishmael",
                var sinner when sinner.Contains("Rodion", StringComparison.OrdinalIgnoreCase) => "/Sinner/Rodion",
                var sinner when sinner.Contains("Sinclair", StringComparison.OrdinalIgnoreCase) => "/Sinner/Sinclair",
                var sinner when sinner.Contains("Outis", StringComparison.OrdinalIgnoreCase) => "/Sinner/Outis",
                var sinner when sinner.Contains("Gregor", StringComparison.OrdinalIgnoreCase) => "/Sinner/Gregor"
            };

            FactionTitle = identity.Name switch
            {
                var name when name.Contains("Zwei Association", StringComparison.OrdinalIgnoreCase) => "Zwei Association",
                var name when name.Contains("Shi Association", StringComparison.OrdinalIgnoreCase) => "Shi Association",
                var name when name.Contains("Cinq Association", StringComparison.OrdinalIgnoreCase) => "Cinq Association",
                var name when name.Contains("Liu Association", StringComparison.OrdinalIgnoreCase) => "Liu Association",
                var name when name.Contains("Seven Association", StringComparison.OrdinalIgnoreCase) => "Seven Association",
                var name when name.Contains("Devyat Association", StringComparison.OrdinalIgnoreCase) => "Devyat Association",
                var name when name.Contains("Dieci Association", StringComparison.OrdinalIgnoreCase) => "Dieci Association",
                var name when name.Contains("Oufi Association", StringComparison.OrdinalIgnoreCase) => "Oufi Association",
                _ => identity.Name
            };
        }
    }
}
