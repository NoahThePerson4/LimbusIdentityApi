@page "/create/identity"
@using LimbusIdentityApp.Clients
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IdentityClient IdentityClient
@inject PassiveClient PassiveClient
@inject SkillClient SkillClient

<PageTitle>Create Identity</PageTitle>

<div class="mt-2">
    <a class="btn btn-primary" role="button" href="/identities">Return</a>
</div>

@if (ids is null || passives is null || skills is null)
{
    <p><em>Loading</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@ids"
                      FormName="CreateSkill"
                      OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <div>
                    <label for="Name" class="form-label">Name:</label>
                    <InputText id="Name" @bind-Value="ids.Name" class="form-control" />
                    <ValidationMessage For="()=> ids.Name" />
                </div>
                <div>
                    <label for="Sinner" class="form-label">Sinner:</label>
                    <InputText id="Sinner" @bind-Value="ids.Sinner" class="form-control" />
                    <ValidationMessage For="()=> ids.Sinner" />
                </div>
                <div>
                    <label for="Health" class="form-label">Health:</label>
                    <InputNumber id="Health" @bind-Value="ids.Health" class="form-control" />
                    <ValidationMessage For="()=> ids.Health" />
                </div>
                <div>
                    <label for="Ineffective" class="form-label">Ineffective:</label>
                    <InputText id="Ineffective" @bind-Value="ids.Ineffective" class="form-control" />
                    <ValidationMessage For="()=> ids.Ineffective" />
                </div>
                <div>
                    <label for="Fatal" class="form-label">Fatal:</label>
                    <InputText id="Fatal" @bind-Value="ids.Fatal" class="form-control" />
                    <ValidationMessage For="()=> ids.Fatal" />
                </div>
                <div>
                    <label for="DefenseLevel" class="form-label">Defense Level:</label>
                    <InputNumber id="DefenseLevel" @bind-Value="ids.DefenseLevel" class="form-control" />
                    <ValidationMessage For="()=> ids.DefenseLevel" />
                </div>
                <div>
                    <label for="Min" class="form-label">Min Speed:</label>
                    <InputNumber id="Min" @bind-Value="ids.MinSpeed" class="form-control" />
                    <ValidationMessage For="()=> ids.MinSpeed" />
                </div>
                <div>
                    <label for="Max" class="form-label">Max Speed:</label>
                    <InputNumber id="Max" @bind-Value="ids.MaxSpeed" class="form-control" />
                    <ValidationMessage For="()=> ids.MaxSpeed" />
                </div>
                <div>
                    <label for="Faction" class="form-label">Faction:</label>
                    <InputText id="Faction" @bind-Value="ids.Faction" class="form-control" />
                    <ValidationMessage For="()=> ids.Faction" />
                </div>
                <div>
                    <label for="Image" class="form-label">Image:</label>
                    <InputText id="Image" @bind-Value="ids.Image" class="form-control" />
                    <ValidationMessage For="()=> ids.Image" />
                </div>
                <div class="mb-3">
                    <label for="Passives" class="form-label">Passive Ids:</label>
                    <div>
                        @for (int i = 0; i < ids.PassiveIds.Count; i++)
                        {
                            <div class="input-group mb-2">
                                <InputNumber @bind-Value="ids.PassiveIds[i]" class="form-control" />
                                <button type="button" class="btn btn-danger" @onclick="() => RemovePassive(
                                    i-1)">
                                    Remove
                                </button>
                            </div>
                            <ValidationMessage For="() => ids.PassiveIds[i]" />
                        }
                        <button type="button" class="btn btn-primary" @onclick="AddPassive">Add Passive</button>
                    </div>
                </div>
                <div class="input-group mt-2">
                    <label for="newPassive" class="form-label">New Passive Value:</label>
                    <InputNumber id="newAbility" @bind-Value="newPassiveValue" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="Skills" class="form-label">Skill Ids:</label>
                    <div>
                        @for (int i = 0; i < ids.SkillIds.Count; i++)
                        {
                            <div class="input-group mb-2">
                                <InputNumber @bind-Value="ids.SkillIds[i]" class="form-control" />
                                <button type="button" class="btn btn-danger" @onclick="() => RemoveSkill(
                                    i-1)">
                                    Remove
                                </button>
                            </div>
                            <ValidationMessage For="() => ids.SkillIds[i]" />
                        }
                        <button type="button" class="btn btn-primary" @onclick="AddSkill">Add Skill</button>
                    </div>
                </div>
                <div class="input-group mt-2">
                    <label for="newSkill" class="form-label">New Skill Value:</label>
                    <InputNumber id="newSkill" @bind-Value="newSkillValue" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary mt-3">Submit</button>
                <a class="btn btn-danger mt-3" role="button" href="/identities">Cancel</a>
            </EditForm>
        </div>
     </div>

    <h3 class="mt-3">Passives</h3>
    <div class="row mb-4">
        <div class="col-sm-3">
            <input type="text" class="form-control" placeholder="Search Passives" @bind="searchStringP"
                   @bind:event="oninput" @onkeyup="PassiveOnSearchChangedAsync" />
        </div>
    </div>
    <table class="table table-striped table table-hover mt-3">
        <thead class="table-dark">
            <th>Id</th>
            <th>Name</th>
            <th>Add</th>
        </thead>
        <tbody>
            @foreach(var passive in passives)
            {
                <tr>
                    <td>@passive.Id</td>
                    <td>@passive.Name</td>
                    <td><button class="btn btn-danger" @onclick="() => AddPassiveTable(passive.Id)">Add Passive</button></td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn @GetButtonClass(pageP <= 1)" @onclick="PassiveSelectedPageDownAsync" disabled="@((pageP <= 1))">Previous Page</button>
    <button class="btn @GetButtonClass(passives?.Length < 10)" @onclick="PassiveSelectedPageUpAsync" disabled="@((passives?.Length < 10))">Next Page</button>
    
    <h3 class="mt-3">Skills</h3>
    <div class="row mb-4">
        <div class="col-sm-3">
            <input type="text" class="form-control" placeholder="Search Skills" @bind="searchStringS"
                   @bind:event="oninput" @onkeyup="SkillOnSearchChangedAsync" />
        </div>
    </div>

    <table class="table table-striped table table-hover mt-3">
        <thead class="table-dark">
        <th>Id</th>
        <th>Name</th>
        <th>Add</th>
        </thead>
        <tbody>
            @foreach (var skill in skills)
            {
                <tr>
                    <td>@skill.Id</td>
                    <td>@skill.Name</td>
                    <td><button class="btn btn-danger" @onclick="() => AddSkillTable(skill.Id)">Add Skill</button></td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn @GetButtonClass(pageS <= 1)" @onclick="SkillSelectedPageDownAsync" disabled="@((pageS <= 1))">Previous Page</button>
    <button class="btn @GetButtonClass(skills?.Length < 10)" @onclick="SkillSelectedPageUpAsync" disabled="@((skills?.Length < 10))">Next Page</button>
}

@code {
    [SupplyParameterFromForm]
    private Models.IdentityCreate? ids { get; set; }

    private Models.SkillSummary[]? skills { get; set; }
    private Models.PassiveSummary[]? passives { get; set; }

    protected override Task OnParametersSetAsync()
    {
        if(ids is not null)
        {
            return Task.CompletedTask;
        }
        ids = new()
        {
            Name = string.Empty,
            Sinner = string.Empty,
            Health = 0,
            Ineffective = string.Empty,
            Fatal = string.Empty,
            DefenseLevel = 0,
            MinSpeed = 0,
            MaxSpeed = 0,
            Image = string.Empty,
            PassiveIds = new List<int>(),
            SkillIds = new List<int>()
        };
        return Task.CompletedTask;
    }

    private string GetButtonClass(bool isDisabled)
    {
        return isDisabled ? "btn-disabled" : "btn-primary";
    }

    protected override async Task OnInitializedAsync()
    {
        skills = await SkillClient.GetSkillsAsync(Filter:null,PageNumber: 1, PageSize: 10);
        passives = await PassiveClient.GetPassivesAsync(Filter: null, PageNumber: 1, PageSize: 10);
    }

    int pageP = 1;
    private string? searchStringP;

    private async Task PassiveSelectedPageUpAsync()
    {
        int selectedPage = pageP + 1;
        pageP = selectedPage;
        passives = await PassiveClient.GetPassivesAsync(Filter: searchStringP, PageNumber: selectedPage, PageSize: 10);
    }

    private async Task PassiveSelectedPageDownAsync()
    {
        int selectedPage = pageP - 1;

        if (selectedPage < 1)
        {
            selectedPage = 1;
        }

        pageP = selectedPage;
        passives = await PassiveClient.GetPassivesAsync(Filter: searchStringP, PageNumber: selectedPage, PageSize: 10);
    }

    private async Task PassiveOnSearchChangedAsync()
    {
        pageP = 1;
        passives = await PassiveClient.GetPassivesAsync(Filter: searchStringP, PageNumber: 1, PageSize: 10);
    }

    int pageS = 1;
    private string? searchStringS;

    private async Task SkillSelectedPageUpAsync()
    {
        int selectedPage = pageS + 1;
        pageS = selectedPage;
        skills = await SkillClient.GetSkillsAsync(Filter: searchStringS, PageNumber: selectedPage, PageSize: 10);
    }

    private async Task SkillSelectedPageDownAsync()
    {
        int selectedPage = pageS - 1;

        if (selectedPage < 1)
        {
            selectedPage = 1;
        }

        pageS = selectedPage;
        skills = await SkillClient.GetSkillsAsync(Filter: searchStringS, PageNumber: selectedPage, PageSize: 10);
    }

    private async Task SkillOnSearchChangedAsync()
    {
        pageS = 1;
        skills = await SkillClient.GetSkillsAsync(Filter: searchStringS, PageNumber: 1, PageSize: 10);
    }

    private int newPassiveValue { get; set; } = 0;

    private void AddPassive()
    {
        ids.PassiveIds.Add(newPassiveValue);
        newPassiveValue = 0;
    }

    private void AddPassiveTable(int ID)
    {
        ids.PassiveIds.Add(ID);
        newPassiveValue = 0;
    }

    private void RemovePassive(int index)
    {
        if (ids?.PassiveIds != null && index >= 0)
        {
            ids.PassiveIds.RemoveAt(index);
        }
    }

    private int newSkillValue { get; set; } = 0;

    private void AddSkill()
    {
        ids.SkillIds.Add(newSkillValue);
        newSkillValue = 0;
    }

    private void AddSkillTable(int ID)
    {
        ids.SkillIds.Add(ID);
        newSkillValue = 0;
    }

    private void RemoveSkill(int index)
    {
        if (ids?.SkillIds != null && index >= 0)
        {
            ids.SkillIds.RemoveAt(index);
        }
    }

    private async Task HandleSubmit()
    {
            ArgumentNullException.ThrowIfNull(ids);

            await IdentityClient.AddIdentityAsync(ids);

        NavigationManager.NavigateTo("/identities");
    }
}
