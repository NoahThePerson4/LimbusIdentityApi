@page "/identities"
@using LimbusIdentityApp.Clients
@using LimbusIdentityApp.Models
@inject IdentityClient IdentityClient
@rendermode InteractiveServer
@attribute [StreamRendering]

@if (ids is null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <div class="row mb-4">
        <div class="col-sm-3">
            <input type="text" class="form-control" placeholder="Search Identities" @bind="searchString"
                   @bind:event="oninput" @onkeyup="OnSearchChangedAsync" />
        </div>
    </div>

    <table class="table table-striped table table-hover mt-3">
        <thead>
            <th>Image</th>
            <th>Id</th>
            <th>Name</th>
            <th>Sinner</th>
            <th>Health</th>
            <th>Defense Level</th>
            <th>Min Speed</th>
            <th>Max Speed</th>
            <th>Passive Names</th>
            <th>Skill Names</th>
        </thead>
        <tbody>
            @foreach(var id in ids)
            {
                <tr>
                    <td style="text-align: center; vertical-align: bottom; padding: 0; margin: 0;">
                        <img class="" src="@id.Image" alt="Card image cap" style="max-width: 30%; max-height: 30%;">
                    </td>
                    <td>@id.Id</td>
                    <td>@id.Name</td>
                    <td>@id.Sinner</td>
                    <td>@id.Health</td>
                    <td>@id.DefenseLevel</td>
                    <td>@id.MinSpeed</td>
                    <td>@id.MaxSpeed</td>
                    <td>@string.Join(", ",id.PassivesName)</td>
                    <td>@string.Join(", ",id.SkillNames)</td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn @GetButtonClass(page <= 1)" @onclick="SelectedPageDownAsync" disabled="@((page <= 1))">Previous Page</button>
    <button class="btn @GetButtonClass(ids?.Length < 10)" @onclick="SelectedPageUpAsync" disabled="@((ids?.Length < 10))">Next Page</button>
}

@code {
    private IdentitySummary[]? ids;

    protected override async Task OnInitializedAsync()
    {
        ids = await IdentityClient.GetIdentitiesAsync(PageNumber: 1, PageSize: 10);
    }

    private string GetButtonClass(bool isDisabled)
    {
        return isDisabled ? "btn-disabled" : "btn-primary";
    }

    int page = 1;
    private string? searchString;

    private async Task SelectedPageUpAsync()
    {
        int selectedPage = page + 1;
        page = selectedPage;
        ids = await IdentityClient.GetIdentitiesAsync(PageNumber: selectedPage, PageSize: 10);
    }

    private async Task SelectedPageDownAsync()
    {
        int selectedPage = page - 1;

        if (selectedPage < 1)
        {
            selectedPage = 1;
        }

        page = selectedPage;
        ids = await IdentityClient.GetIdentitiesAsync(PageNumber: selectedPage, PageSize: 10);
    }

    private async Task OnSearchChangedAsync()
    {
        page = 1;
        ids = await IdentityClient.GetIdentitiesAsync(Filter: searchString, PageNumber: 1, PageSize: 10);
    }
}
