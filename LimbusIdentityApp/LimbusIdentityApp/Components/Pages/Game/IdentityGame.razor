@page "/game/identity"
@using System.Diagnostics
@using LimbusIdentityApp.Clients
@using LimbusIdentityApp.Models
@inject IdentityClient IdentityClient
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Identity Game</PageTitle>

@if (identity2 is null)
{
    <p><em>Loading identity2...</em></p>
}
else if (identity is null)
{
    <button class="btn btn-primary" @onclick="PickAIdentity">Random identity</button>
    
    if (hard == false)
    {
        <div></div>
        <text>Don't click hard mode to be able to use faction names instead of actual full names.</text>
        <div></div>
        <button class="btn btn-primary" @onclick="HardMode">Hard Mode?</button>
    }

    <p><em>Loading identity...</em></p>
}
else
{
    <div class="row mb-4">
        <div class="col-sm-3">
            <input type="text" class="form-control" placeholder="What is The identity Name?" @bind="searchString"
                   @bind:event="oninput" @onkeyup="OnSearchChangedAsync" />
        </div>
    </div>

    <button class="btn btn-primary" @onclick="Hint">Hint?</button>
    if (hard == true)
    {
        <table class="table table-striped table table-hover mt-3">
            <thead class="table-dark">
            <th>identity Length</th>
            <th>Your Length</th>
            </thead>

            <tbody>
                <tr>
                    <td>@identity.Name.Length</td>
                    <td>@searchString.Length</td>
                </tr>

            </tbody>
        </table>
    }
    else
    {
        <table class="table table-striped table table-hover mt-3">
            <thead class="table-dark">
            <th>identity Length</th>
            <th>Faction Length</th>
            <th>Your Length</th>
            </thead>

            <tbody>
                <tr>
                    <td>@identity.Name.Length</td>
                    <td>@identity.Faction.Length</td>
                    <td>@searchString.Length</td>
                </tr>

            </tbody>
        </table>
    }

    <table class="table table-striped table table-hover mt-3">
        <thead class="table-dark">
        <th>Sinner</th>
        <th>Passives</th>
        <th>Skills</th>
        </thead>

        <tbody>
            <tr>
                <td>@sin</td>
                <td>@string.Join(',',identity.PassivesName)</td>
                <td>@string.Join(',', identity.SkillNames)</td>
            </tr>
        </tbody>
    </table>

    if (identityW is null)
    {
        <button class="btn btn-primary" @onclick="PickAIdentity">Skip</button>

        <table class="table table-striped table table-hover mt-3">
            <thead class="table-dark">
            <th>Name</th>
            </thead>

            @foreach (var identity in filteredidentitys)
            {
                <tbody>
                    <tr>
                        <td>@identity</td>
                    </tr>

                </tbody>
            }
        </table>
    }
    if (identityW is not null)
    {
        <table class="table table-striped table table-hover mt-3">
            <thead class="table-dark">
            <th>Id</th>
            <th>Name</th>
            <th>Sinner</th>
            <th>Faction</th>
            <th>Passives</th>
            <th>Skills</th>

            </thead>
            <tbody>

                <tr>
                    <td>@identity.Id</td>
                    <td>@identity.Name</td>
                    <td>@identity.Sinner</td>
                    <td>@identity.Faction</td>
                    <td>@string.Join(',',identity.PassivesName)</td>
                    <td>@string.Join(',', identity.SkillNames)</td>
                </tr>

            </tbody>
        </table>

        <button class="btn btn-primary" @onclick="PickAIdentity">New Random identity</button>
    }
}


@code {
    private IdentitySummary[]? identity2;
    private Models.IdentitySummary? identity;
    private Models.IdentitySummary? identityW;
    private string? searchString;
    public bool hard = false;

    protected override async Task OnInitializedAsync()
    {
        identity2 = await IdentityClient.GetIdentitiesAsync(PageNumber: 1, PageSize: 30);
    }

    private async Task PickAIdentity()
    {
        randomP = await GetRandom();
        identity = randomP;
        identityW = null;
        searchString = "";
        sin = "Hidden";
    }

    private async Task HardMode()
    {
        hard = true;
    }

    List<IdentitySummary> identityList = new List<IdentitySummary>();
    List<String> identityListA = new List<String>();
    private List<string> filteredidentitys = new List<string>();

    Random random = new Random();

    public IdentitySummary? randomP;

    List<String> identityListA2 = new List<String>();

    private Task<IdentitySummary> GetRandom()
    {
        identityListA.Clear();
        identityList.Clear();
        identityListA2.Clear();

        foreach (var identity in identity2)
        {
            identityList.Add(identity);
            identityListA.Add(identity.Name);
        }

        var distinct = identityListA.Distinct();

        foreach (var identity in distinct)
        {
            identityListA2.Add(identity);
        }
        identityListA2.Sort();

        int randomX = random.Next(1, identityList.Count);

        return Task.FromResult(identityList[randomX]);
    }
    public string sin = "Hidden";

    private async Task Hint()
    {
        sin = identity.Sinner;
    }

    private async Task OnSearchChangedAsync()
    {
        if (searchString == identity.Name || (hard == false && searchString == identity.Faction))
        {
            identityW = identity;
            return;
        }

        if (!string.IsNullOrEmpty(searchString))
        {
            filteredidentitys = identityListA2.Where(p => p.Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            filteredidentitys = identityListA2;
        }
    }
}
