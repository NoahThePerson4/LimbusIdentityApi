@page "/passives"
@using LimbusIdentityApp.Clients
@using LimbusIdentityApp.Models
@inject PassiveClient PassiveClient
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Passives</PageTitle>

<div class="mt-2 mb-3">
    <a class="btn btn-primary" role="button" href="/create/passive">Create</a>
</div>

@if (passives is null)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <div class="row mb-4">
        <div class="col-sm-3">
            <input type="text" class="form-control" placeholder="Search Passives" @bind="searchString" 
            @bind:event="oninput" @onkeyup="OnSearchChangedAsync"/>
        </div>
    </div>

    <table class="table table-striped table table-hover mt-3">
    <thead class="table-dark">
    <th>Id</th>
    <th>Name</th>
    <th>Cost</th>
    <th>Support</th>
    <th>Edit</th>
    <th>Description</th>
    </thead>
    <tbody>
            @foreach(var passive in passives)
            {
                string passiveColor = passive.Cost switch
                {
                    var name when name.Contains("Wrath", StringComparison.OrdinalIgnoreCase) => "color:red",
                    var name when name.Contains("Lust", StringComparison.OrdinalIgnoreCase) => "color:orange",
                    var name when name.Contains("Sloth", StringComparison.OrdinalIgnoreCase) => "color:goldenrod",
                    var name when name.Contains("Gluttony", StringComparison.OrdinalIgnoreCase) => "color:forestgreen",
                    var name when name.Contains("Pride", StringComparison.OrdinalIgnoreCase) => "color:blue",
                    var name when name.Contains("Gloom", StringComparison.OrdinalIgnoreCase) => "color:steelblue",
                    var name when name.Contains("Envy", StringComparison.OrdinalIgnoreCase) => "color:purple",
                    _ => "color:silver"
                };

                <tr>
                    <td style="@passiveColor">@passive.Id</td>
                    <td>@passive.Name</td>
                    <td style="@passiveColor">@passive.Cost</td>
                    <td>@passive.Support</td>
                    <td>
                        <div>
                            <a class="btn btn-primary me-2" role="button" href="/edit/passive/@passive.Id">
                                <i class="bi bi-search">Edit</i>
                            </a>
                        </div>
                    </td>
                    <td>@passive.Description</td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn @GetButtonClass(page <= 1)" @onclick="SelectedPageDownAsync" disabled="@((page <= 1))">Previous Page</button>
    <button class="btn @GetButtonClass(passives?.Length < 10)" @onclick="SelectedPageUpAsync" disabled="@((passives?.Length < 10))">Next Page</button>
}

@code {
    private PassiveSummary[]? passives;

    protected override async Task OnInitializedAsync()
    {
        passives = await PassiveClient.GetPassivesAsync(PageNumber: 1, PageSize: 10);
    }

    private string GetButtonClass(bool isDisabled)
    {
        return isDisabled ? "btn-disabled" : "btn-primary";
    }

    int page = 1;
    private string? searchString;

    private async Task SelectedPageUpAsync()
    {
        int selectedPage = page + 1;
        page = selectedPage;
        passives = await PassiveClient.GetPassivesAsync(Filter: searchString, PageNumber: selectedPage, PageSize: 10);
    }

    private async Task SelectedPageDownAsync()
    {
        int selectedPage = page - 1;

        if(selectedPage < 1)
        {
            selectedPage = 1;
        }

        page = selectedPage;
        passives = await PassiveClient.GetPassivesAsync(Filter: searchString, PageNumber: selectedPage, PageSize: 10);
    }

    private async Task OnSearchChangedAsync()
    {
        page = 1;
        passives = await PassiveClient.GetPassivesAsync(Filter: searchString, PageNumber: 1, PageSize: 10);
    }
}
